Backend Framework - Django



Assumptions - Rest Framework

                           - ATM Service Class Used (Which would be defined earlier in some other module)

                           - Serializer (Already got custom Model Serializer)

                           - Django 3.0

                           - python 3

#models.py



class User(models.Model):

# This model is used to store user data

    username = models.Charfield(max_length=20, null=False)

    email = models.EmailField(null=False)





class BankAccount(models.Model):

# This model is used to users bank account detials

    user = models.OneToOneField(User, null=False)  # Assuming one account / user

    card_number = models.Charfield(max_length=8)

    pin_number =  models.Charfield(max_length=4) # will be encrypted using cryptography library

    balance = models.BigIntegerField()



# views.py



class Register(APIView):

# class contain post method to register user 

   def post(self, request):

        # post method to save user

       data = request.data

       serializer = RegisterSerializer(data=data)

       # Serializers to check for sanity of data before using it

       if serializer.is_valid(raise_exception=True):

           atm_user = serializer.save()

       return Respone('Sucessfully added user card details', status=status.HTTP_200_OK )





class ValidateUser(APIView):

    def get(self, request):

        data = request.data

         # shortcut function to check user bank account else return HTTP 400 error to frontend

        user = get_object_or_404(BankAccount, card_number=data.get('card_number'),         pin_number=data.get('pin_number'))

        return Response('User with {} card number exists '.format(user.card_number),       status=status.HTTP_200_OK)



class Deposit(APIView):

    def put(self, request):

        # put method to update balance of user account

        data = request.data

        account_serializer = AccountSerializer(data=request.data)

        # Serializers to check for sanity of data before using it

        if account_serializer.is_valid(raise_exception=True):

             data = deposit_serializer.validated_data

             user_bank_detail = BankDetial.objects.get(card_number=data.get('card_number'))

             user_bank_detail.balance = user_bank_detail.balance + data.get('deposit_amount')

             # save updated balance object 

             user_bank_detail.save()

        return Response('Successfully added money to your account',  status=status.HTTP_200_OK)





class Withdraw(APIView):

    def put(self, request):

       # put method to withdraw user balance on transaction

       data = request.data

       account_serializer = AccountSerializer(data=request.data)

       # Serializers to check for sanity of data before using it

       if account_serializer.is_valid(raise_exception=True):

            # get user balance object

            user_bank_detail =  BankDetail.objects.get(card_number=data.get('card_number'),  pin_number=data.get('pin_number'))

            user_balance = user_bank_detail.balance

            # check if withdraw balance is greater than 20000

            if data.get('withdraw_amount') > 20000:

                 return Response ('Withdraw amount cannot be greater than 20000', status=status.HTTP_400_BAD_REQUEST)

            # check if user has sufficient balance or not

           if user_balance < data.get('withdraw_amount'):

                 return Response ('You do not have sufficient balance in your account, try with lower amount, thanks', status=status.HTTP_400_BAD_REQUEST)

           else:

                # check if ATM has required balance or not which user wants to withdraw

                if data.get('withdraw_amount') <= ATM_BALANCE:

                     # check if user entered amount in multiples of 100, 500, 2000

                     if data.get('withdraw_amount') % 100 != 0:

                            return Response ('Sorry, Mate. Please try in multiples of 100 :) ',  status=status.HTTP_400_BAD_REQUEST)                         

                      # now reduce the denomination from ATM machine

                     ATM_2000_DENOMINATION =ATM_2000_DENOMINATION - ( data.get('withdraw_amount') % 2000 )

                     ATM_500_DENOMINATION  = ATM_500_DENOMINATION  -  ( data.get('withdraw_amount') % 500)

                     ATM_100_DENOMINATION  = ATM_100_DENOMINATION  -   ( data.get('withdraw_amount') % 100 )

                     user_balance = user_balance - data.get('withdraw_amount')

                     user_bank_detail.balance = user_balance

                     user_bank_detail.save()

                     return Response ('Thanks for your visit, please collect cash',  status=status.HTTP_400_BAD_REQUEST)

                else: 

                   return Response ('ATM doesn't have sufficient balance, Sorry for inconvenience ',  status=status.HTTP_400_BAD_REQUEST)


